{"version":3,"sources":["Rooms.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_validateRoom","room","_checkState","Array","isArray","hasOwnProperty","id","name","description","actions","map","action","_validateAction","text","ref","_validateRefIntegrity","rooms","Object","values","forEach","condition","obj","Error","JSON","stringify","roomsById","json","importRooms","App","useState","roomId","setRoomId","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAyBMA,EAAgB,SAACC,GACrBC,EAA4B,kBAATD,IAAsBE,MAAMC,QAAQH,GAAOA,GAC9DC,EAAYD,EAAKI,eAAe,OAA4B,kBAAZJ,EAAKK,GAAiBL,GACtEC,EAAYD,EAAKI,eAAe,SAAgC,kBAAdJ,EAAKM,KAAmBN,GACtEA,EAAKI,eAAe,gBACtBH,EAAwC,kBAArBD,EAAKO,YAA0BP,GAEpDC,EAAYD,EAAKI,eAAe,YAAcF,MAAMC,QAAQH,EAAKQ,SAAUR,GAC3E,IAAMQ,EAAUR,EAAKQ,QAAQC,KAAI,SAACC,GAAD,OAAiBC,EAAgBD,MAElE,OAAO,2BACFV,GADL,IAEEQ,aAIEG,EAAkB,SAACD,GAKvB,OAJAT,EAAYS,EAAON,eAAe,SAAkC,kBAAhBM,EAAOE,KAAmBF,GAC1EA,EAAON,eAAe,QACxBH,EAAkC,kBAAfS,EAAOG,IAAkBH,GAEvCA,GAMHI,EAAwB,SAACC,GAC7BC,OAAOC,OAAOF,GAAOG,SAAQ,SAAAlB,GAC3BA,EAAKQ,QAAQU,SAAQ,SAAAR,GACfA,EAAOG,KACTZ,EAAiC,MAArBc,EAAML,EAAOG,KAAcH,UASzCT,EAAc,SAACkB,EAAoBC,GACvC,IAAKD,EACH,MAAM,IAAIE,MAAM,uBAAyBC,KAAKC,UAAUH,K,OC/DtDI,EDU8C,WAClD,IAAMA,EAAsC,GAO5C,OANAC,EAAKP,SAAQ,SAAAE,GACX,IAAMpB,EAAOD,EAAcqB,GACnBf,EAAOL,EAAPK,GACRmB,EAAUnB,GAAML,KAElBc,EAAsBU,GACfA,EClBSE,GA8BHC,EA3BH,WACV,MAA4BC,mBAHL,sBAGvB,mBAAOC,EAAP,KAAeC,EAAf,KACM9B,EAAOwB,EAAUK,GAEvB,OACE,sBAAKE,UAAU,MAAf,UACE,6BAAK/B,EAAKM,OACV,qBAAKyB,UAAU,cAAf,SACG/B,EAAKO,cAEPP,EAAKQ,QAAQC,KAAI,SAAAC,GAAM,OACtB,qBAEEqB,UAAU,SACVC,QAAS,WACHtB,EAAOG,KACTiB,EAAUpB,EAAOG,MALvB,SASGH,EAAOE,MARHF,EAAOG,YCLPoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9a2e60fe.chunk.js","sourcesContent":["import json from './rooms.json';\r\n\r\ninterface Room {\r\n  id: string,\r\n  name: string,\r\n  description?: string,\r\n  actions: Action[]\r\n}\r\n\r\ntype Action = {\r\n  ref?: string,\r\n  text: string\r\n}\r\n\r\nconst importRooms: () => { [name: string]: Room } = () => {\r\n  const roomsById: { [name: string]: Room } = {};\r\n  json.forEach(obj => {\r\n    const room = _validateRoom(obj);\r\n    const { id } = room;\r\n    roomsById[id] = room;\r\n  });\r\n  _validateRefIntegrity(roomsById);\r\n  return roomsById;\r\n}\r\n\r\nconst _validateRoom = (room: any): Room => {\r\n  _checkState(typeof room === 'object' && !Array.isArray(room), room);\r\n  _checkState(room.hasOwnProperty('id') && typeof room.id === 'string', room);\r\n  _checkState(room.hasOwnProperty('name') && typeof room.name === 'string', room);\r\n  if (room.hasOwnProperty('description')) {\r\n    _checkState(typeof room.description === 'string', room);\r\n  }\r\n  _checkState(room.hasOwnProperty('actions') && Array.isArray(room.actions), room);\r\n  const actions = room.actions.map((action: any) => _validateAction(action));\r\n\r\n  return {\r\n    ...room,\r\n    actions\r\n  };\r\n};\r\n\r\nconst _validateAction = (action: any): Action => {\r\n  _checkState(action.hasOwnProperty('text') && typeof action.text === 'string', action);\r\n  if (action.hasOwnProperty('ref')) {\r\n    _checkState(typeof action.ref === 'string', action);\r\n  }\r\n  return action as Action;\r\n};\r\n\r\n/**\r\n * Validate that all references to room ids are valid\r\n */\r\nconst _validateRefIntegrity = (rooms: { [id: string]: Room }) => {\r\n  Object.values(rooms).forEach(room => {\r\n    room.actions.forEach(action => {\r\n      if (action.ref) {\r\n        _checkState(rooms[action.ref] != null, action);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @param obj The contents of the object being checked, for logging purposes\r\n */\r\nconst _checkState = (condition: boolean, obj: any): void => {\r\n  if (!condition) {\r\n    throw new Error(\"Invalid definition: \" + JSON.stringify(obj));\r\n  }\r\n}\r\n\r\nexport { importRooms };\r\nexport type { Room, Action };\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { importRooms } from './Rooms';\r\n\r\nconst roomsById = importRooms();\r\nconst STARTING_ROOM_ID = 'outside_front_door';\r\n\r\nconst App = () => {\r\n  const [roomId, setRoomId] = useState(STARTING_ROOM_ID);\r\n  const room = roomsById[roomId];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>{room.name}</h1>\r\n      <div className=\"description\">\r\n        {room.description}\r\n      </div>\r\n      {room.actions.map(action => (\r\n        <div\r\n          key={action.ref}\r\n          className=\"action\"\r\n          onClick={() => {\r\n            if (action.ref) {\r\n              setRoomId(action.ref);\r\n            }\r\n          }}\r\n        >\r\n          {action.text}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}