{"version":3,"sources":["Button.tsx","ActionButton.tsx","Controller.tsx","saveFile.tsx","GameState.tsx","Footer.tsx","Menu.tsx","App.tsx","Scenes.tsx","index.tsx"],"names":["Button","type","size","onClick","children","rest","className","join","ActionButton","action","controller","inventory","requires","items","every","item","includes","forbids","find","isVisible","adds","removes","scene","setInventory","setSceneId","filter","text","Controller","initialState","sceneId","this","load","localStorage","window","value","serialized","getItem","JSON","parse","atob","e","alert","console","log","save","state","setItem","btoa","stringify","serialize","Footer","restart","saveFile","loadSaveFile","disabled","Menu","title","description","ref","createRef","useEffect","current","scrollTo","App","scenes","useState","name","actions","map","index","_validateScene","_checkState","_isObject","hasOwnProperty","id","Array","isArray","_validateAction","forEach","i","_validateRefIntegrity","Object","values","room","condition","obj","Error","o","scenesById","json","importScenes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wmLAqCeA,EAnBA,SAAC,GAMF,IAAD,IALXC,YAKW,MALJ,QAKI,MAJXC,YAIW,MAJJ,SAII,EAHXC,EAGW,EAHXA,QACAC,EAEW,EAFXA,SACGC,EACQ,iBACLC,EAAY,CAAC,SAAUL,EAAMC,GAAMK,KAAK,KAC9C,OACE,gDACED,UAAWA,EACXH,QAASA,GACLE,GAHN,aAKGD,MCwCQI,EA3DM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,WA4C9B,OA3CkB,WAChB,IAAQC,EAAcD,EAAdC,UACR,QAAIF,EAAOG,UACLH,EAAOG,SAASC,QACbJ,EAAOG,SAASC,MAAMC,OAAM,SAAAC,GAAI,OAAIJ,EAAUK,SAASD,UAK5DN,EAAOQ,SACLR,EAAOQ,QAAQJ,OACbJ,EAAOQ,QAAQJ,MAAMK,MAAK,SAAAH,GAAI,OAAIJ,EAAUK,SAASD,OAgC3DI,GAEA,cAAC,EAAD,CACElB,KAAK,QACLC,KAAK,SACLC,QA7BU,WACd,IAAQiB,EAAyBX,EAAzBW,KAAMC,EAAmBZ,EAAnBY,QAASC,EAAUb,EAAVa,MACfX,EAAwCD,EAAxCC,UAAWY,EAA6Bb,EAA7Ba,aAAcC,EAAed,EAAfc,WAIjC,GAHIF,GACFE,EAAWF,GAETF,EAAM,CACR,IAAQP,EAAUO,EAAVP,MACJA,GAGFU,EADsB,sBAAOZ,GAAP,YAAqBE,KAI/C,GAAIQ,EAAS,CACX,IAAQR,EAAUQ,EAAVR,MACJA,GAGFU,EADyBZ,EAAUc,QAAO,SAAAV,GAAI,OAAIF,IAAUA,EAAMG,SAASD,SAQ7E,SAKGN,EAAOiB,OAKP,M,eC7BMC,E,WAlBb,cAAoF,IAAtEC,EAAqE,EAArEA,aAAcC,EAAuD,EAAvDA,QAASlB,EAA8C,EAA9CA,UAAWa,EAAmC,EAAnCA,WAAYD,EAAuB,EAAvBA,aAAuB,yBAN1EK,kBAM0E,OAL1EC,aAK0E,OAJ1ElB,eAI0E,OAH1Ea,gBAG0E,OAF1ED,kBAE0E,EACjFO,KAAKF,aAAeA,EACpBE,KAAKD,QAAUA,EACfC,KAAKnB,UAAYA,EACjBmB,KAAKN,WAAaA,EAClBM,KAAKP,aAAeA,E,wCAGtB,YAAyC,IAAlCM,EAAiC,EAAjCA,QAASlB,EAAwB,EAAxBA,UACdmB,KAAKN,WAAWK,GAChBC,KAAKP,aAAaZ,K,qBAGpB,WACEmB,KAAKC,KAAKD,KAAKF,kB,KClCXI,EAAiBC,OAAjBD,aAEFD,EAAO,WACX,ICSmBG,EDTbC,EAAaH,EAAaI,QAAQ,QACxC,GAAID,EACF,IACE,OCMeD,EDNIC,ECMcE,KAAKC,MAAMC,KAAKL,IDLjD,MAAOM,GACPC,MAAM,4BACNC,QAAQC,IAAIH,QAIdC,MAAM,sBAER,OAAO,MAGHG,EAAO,SAACC,GACZZ,OAAOD,aAAac,QAAQ,OCbZ,SAACD,GAAD,OAAsBE,KAAKV,KAAKW,UAAUH,IDatBI,CAAUJ,KEqCjCK,G,MA3CA,SAAC,GAA2B,IAAzBxC,EAAwB,EAAxBA,WAehB,OACE,sBAAKJ,UAAU,SAAf,UACE,cAAC,EAAD,CACEL,KAAK,QACLC,KAAK,QACLC,QAPU,kBAAMO,EAAWyC,WAI7B,iBAOA,cAAC,EAAD,CACElD,KAAK,QACLC,KAAK,QACLC,QAnBO,WACX,IAAQ0B,EAAkCnB,EAAlCmB,QAASlB,EAAyBD,EAAzBC,UACjByC,EAAS,CAAEvB,UAASlB,eAclB,kBAOA,cAAC,EAAD,CACEV,KAAK,QACLC,KAAK,QACLC,QAjCO,WACX,IAAM0C,EAAQQ,IACVR,GACFnC,EAAWqB,KAAKc,IA+BdS,UF1BetB,EAAaI,QAAQ,QEsBtC,uBCdSmB,G,MAnBF,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,YAAarD,EAAsB,EAAtBA,SAC5BsD,EAAsBC,sBAO5B,OAJAC,qBAAU,WACRF,EAAIG,QAAQC,SAAS,EAAG,MAIxB,sBAAKxD,UAAU,OAAOoD,IAAKA,EAA3B,UACE,6BAAKF,IACL,mBAAGlD,UAAU,cAAb,SACGmD,IAEFrD,OCgBQ2D,G,MAzBH,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQpC,EAA0B,EAA1BA,aACrB,EAA8BqC,mBAASrC,EAAaC,SAApD,mBAAOA,EAAP,KAAgBL,EAAhB,KACA,EAAkCyC,mBAASrC,EAAajB,WAAxD,mBAAOA,EAAP,KAAkBY,EAAlB,KACMb,EAAa,IAAIiB,EAAW,CAAEC,eAAcC,UAASL,aAAYb,YAAWY,iBAC5ED,EAAQ0C,EAAOnC,GAErB,OACE,sBAAKvB,UAAU,MAAf,UACE,cAAC,EAAD,CACEkD,MAAOlC,EAAM4C,KACbT,YAAanC,EAAMmC,YAFrB,SAIGnC,EAAM6C,QAAQC,KAAI,SAAC3D,EAAQ4D,GAAT,OACjB,cAAC,EAAD,CACE5D,OAAQA,EACRC,WAAYA,GAFd,UAGUD,EAAOiB,KAHjB,YAGyB2C,SAI7B,cAAC,EAAD,CAAQ3D,WAAYA,S,QClBpB4D,EAAiB,SAAChD,GACtBiD,EAAYC,EAAUlD,GAAQA,GAC9BiD,EAAYjD,EAAMmD,eAAe,OAA6B,kBAAbnD,EAAMoD,GAAiBpD,GACxEiD,EAAYjD,EAAMmD,eAAe,SAAiC,kBAAfnD,EAAM4C,KAAmB5C,GACxEA,EAAMmD,eAAe,gBACvBF,EAAyC,kBAAtBjD,EAAMmC,YAA0BnC,GAErDiD,EAAYjD,EAAMmD,eAAe,YAAcE,MAAMC,QAAQtD,EAAM6C,SAAU7C,GAC7E,IAAM6C,EAAU7C,EAAM6C,QAAQC,KAAI,SAAC3D,GAAD,OAAiBoE,EAAgBpE,MAEnE,OAAO,2BACFa,GADL,IAEE6C,aAIEU,EAAkB,SAACpE,GAiCvB,OAhCA8D,EAAY9D,EAAOgE,eAAe,SAAkC,kBAAhBhE,EAAOiB,KAAmBjB,GAC1EA,EAAOgE,eAAe,UACxBF,EAAoC,kBAAjB9D,EAAOa,MAAoBb,GAE5CA,EAAOgE,eAAe,cACxBF,EAAYC,EAAU/D,EAAOG,UAAWH,GACpCA,EAAOG,SAAS6D,eAAe,WACjCF,EAAYI,MAAMC,QAAQnE,EAAOG,SAASC,OAAQJ,GAClDA,EAAOG,SAASC,MAAMiE,SAAQ,SAACC,GAAD,OAAYR,EAAyB,kBAANQ,EAAgBtE,QAG7EA,EAAOgE,eAAe,aACxBF,EAAYC,EAAU/D,EAAOQ,SAAUR,GACnCA,EAAOQ,QAAQwD,eAAe,WAChCF,EAAYI,MAAMC,QAAQnE,EAAOQ,QAAQJ,OAAQJ,GACjDA,EAAOQ,QAAQJ,MAAMiE,SAAQ,SAACC,GAAD,OAAYR,EAAyB,kBAANQ,EAAgBtE,QAG5EA,EAAOgE,eAAe,UACxBF,EAAYC,EAAU/D,EAAOW,MAAOX,GAChCA,EAAOW,KAAKqD,eAAe,WAC7BF,EAAYI,MAAMC,QAAQnE,EAAOW,KAAKP,OAAQJ,GAC9CA,EAAOW,KAAKP,MAAMiE,SAAQ,SAACC,GAAD,OAAYR,EAAyB,kBAANQ,EAAgBtE,QAGzEA,EAAOgE,eAAe,aACxBF,EAAYC,EAAU/D,EAAOY,SAAUZ,GACnCA,EAAOY,QAAQoD,eAAe,WAChCF,EAAYI,MAAMC,QAAQnE,EAAOY,QAAQR,OAAQJ,GACjDA,EAAOY,QAAQR,MAAMiE,SAAQ,SAACC,GAAD,OAAYR,EAAyB,kBAANQ,EAAgBtE,QAGzEA,GAMHuE,EAAwB,SAAChB,GAC7BiB,OAAOC,OAAOlB,GAAQc,SAAQ,SAAAK,GAC5BA,EAAKhB,QAAQW,SAAQ,SAAArE,GACfA,EAAOa,OACTiD,EAAoC,MAAxBP,EAAOvD,EAAOa,OAAgBb,UAS5C8D,EAAc,SAACa,EAAoBC,GACvC,IAAKD,EACH,MAAM,IAAIE,MAAM,uBAAyBjD,KAAKW,UAAUqC,KAItDb,EAAY,SAACe,GACjB,MAAoB,kBAANA,IAAmBZ,MAAMC,QAAQW,ICxF3CvB,EDEiC,WACrC,IAAMwB,EAAyB,GAO/B,OANAC,EAAKX,SAAQ,SAAAO,GACX,IAAMF,EAAOb,EAAee,GACpBX,EAAOS,EAAPT,GACRc,EAAWd,GAAMS,KAEnBH,EAAsBQ,GACfA,ECVME,GAGfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK7B,OAAQA,EAAQpC,aAJO,CAAEC,QAAS,qBAAsBlB,UAAW,QAM1EmF,SAASC,eAAe,W","file":"static/js/main.815ceb58.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\r\nimport './Button.css';\r\n\r\ntype ButtonType = 'white';\r\ntype ButtonSize = 'small' | 'medium';\r\n\r\ntype Props = {\r\n  type?: ButtonType,\r\n  size?: ButtonSize,\r\n  onClick?: () => void,\r\n  disabled?: boolean,\r\n  children: ReactNode\r\n};\r\n\r\n/**\r\n * Core UI component representing a button.  This defines a number of styles for standard button types.\r\n * This component should be used for all buttons throughout the application to maintain a unified look and feel.\r\n */\r\nconst Button = ({\r\n  type = 'white',\r\n  size = 'medium',\r\n  onClick,\r\n  children,\r\n  ...rest\r\n}: Props) => {\r\n  const className = ['button', type, size].join(' ');\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={onClick}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\nimport Controller from './Controller';\r\nimport type { Action } from './types';\r\n\r\ntype Props = {\r\n  action: Action,\r\n  controller: Controller\r\n};\r\n\r\n/**\r\n * Conditionally displays a {@link Button}, based on a particular {@link Action}, with an appropriate onClick handler\r\n * that executes the appropriate logic defined by the action.\r\n */\r\nconst ActionButton = ({ action, controller }: Props) => {\r\n  const isVisible = () => {\r\n    const { inventory } = controller;\r\n    if (action.requires) {\r\n      if (action.requires.items) {\r\n        if (!action.requires.items.every(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (action.forbids) {\r\n      if (action.forbids.items) {\r\n        if (action.forbids.items.find(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const onClick = () => {\r\n    const { adds, removes, scene } = action;\r\n    const { inventory, setInventory, setSceneId } = controller;\r\n    if (scene) {\r\n      setSceneId(scene);\r\n    }\r\n    if (adds) {\r\n      const { items } = adds;\r\n      if (items) {\r\n        // TODO: add distinct().  Doesn't matter since remove() will remove the duplicates\r\n        const updatedInventory = [...inventory, ...items]\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n    if (removes) {\r\n      const { items } = removes;\r\n      if (items) {\r\n        // TODO: add distinct()\r\n        const updatedInventory = inventory.filter(item => items && !items.includes(item));\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isVisible()) {\r\n    return (\r\n      <Button\r\n        type=\"white\"\r\n        size=\"medium\"\r\n        onClick={onClick}\r\n      >\r\n        {action.text}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default ActionButton;\r\n","import { GameState } from './GameState';\r\n\r\n/**\r\n * Core state management class which encapsulates the result of various {@link React#useState} hooks.\r\n * This is passed from the parent component ({@link App}) to its children, rather than passing individual\r\n * state elements and callback functions.\r\n */\r\ninterface Props {\r\n  readonly initialState: GameState,\r\n  readonly sceneId: string,\r\n  readonly inventory: string[],\r\n  readonly setSceneId: (sceneId: string) => void,\r\n  readonly setInventory: (inventory: string[]) => void\r\n}\r\n\r\nclass Controller implements Props {\r\n  readonly initialState: GameState;\r\n  readonly sceneId: string;\r\n  readonly inventory: string[];\r\n  readonly setSceneId: (sceneId: string) => void;\r\n  readonly setInventory: (inventory: string[]) => void;\r\n\r\n  constructor({ initialState, sceneId, inventory, setSceneId, setInventory }: Props) {\r\n    this.initialState = initialState;\r\n    this.sceneId = sceneId;\r\n    this.inventory = inventory;\r\n    this.setSceneId = setSceneId;\r\n    this.setInventory = setInventory;\r\n  }\r\n\r\n  load({ sceneId, inventory }: GameState) {\r\n    this.setSceneId(sceneId);\r\n    this.setInventory(inventory);\r\n  };\r\n\r\n  restart() {\r\n    this.load(this.initialState);\r\n  }\r\n}\r\n\r\nexport default Controller;\r\n","import { deserialize, GameState, serialize } from './GameState';\r\n\r\nconst { localStorage } = window;\r\n\r\nconst load = (): (GameState | null) => {\r\n  const serialized = localStorage.getItem('save');\r\n  if (serialized) {\r\n    try {\r\n      return deserialize(serialized) as GameState;\r\n    } catch (e) {\r\n      alert('Failed to load save file');\r\n      console.log(e);\r\n    }\r\n  } else {\r\n    // Maybe they manually cleared localStorage\r\n    alert('No save file found');\r\n  }\r\n  return null;\r\n}\r\n\r\nconst save = (state: GameState) => {\r\n  window.localStorage.setItem('save', serialize(state));\r\n}\r\n\r\nconst exists = () => !!localStorage.getItem('save');\r\n\r\nexport {\r\n  load,\r\n  save,\r\n  exists\r\n};\r\n","type GameState = {\r\n  sceneId: string,\r\n  inventory: string[]\r\n};\r\n\r\n/**\r\n * Serialize the contents of {@link GameState} to JSON, and then base-64 encode the result.\r\n */\r\nconst serialize = (state: GameState) => btoa(JSON.stringify(state));\r\n\r\n/**\r\n * Decode the specified base64 string that represents a {@link GameState} object, and then parse it as JSON.\r\n * TODO: Validate the result using json-schema\r\n */\r\nconst deserialize = (value: string) => JSON.parse(atob(value)) as GameState;\r\n\r\nexport type {\r\n  GameState\r\n};\r\n\r\nexport {\r\n  deserialize,\r\n  serialize\r\n}\r\n","import Button from './Button';\r\nimport Controller from './Controller';\r\nimport React from 'react';\r\nimport { GameState } from './GameState';\r\nimport {\r\n  exists as saveFileExists,\r\n  load as loadSaveFile,\r\n  save as saveFile,\r\n} from './saveFile';\r\nimport './Footer.css';\r\n\r\ntype Props = {\r\n  controller: Controller\r\n}\r\n\r\nconst Footer = ({ controller }: Props) => {\r\n  const load = () => {\r\n    const state = loadSaveFile();\r\n    if (state) {\r\n      controller.load(state);\r\n    }\r\n  };\r\n\r\n  const save = () => {\r\n    const { sceneId, inventory }: GameState = controller;\r\n    saveFile({ sceneId, inventory });\r\n  };\r\n\r\n  const restart = () => controller.restart();\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={restart}\r\n      >\r\n        New\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={save}\r\n      >\r\n        Save\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={load}\r\n        disabled={!saveFileExists()}\r\n      >\r\n        Load\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { createRef, ReactNode, RefObject, useEffect } from 'react';\r\nimport './Menu.css';\r\n\r\ntype Props = {\r\n  title: string,\r\n  description?: string,\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * Represents the core decision display of the application.\r\n * This consists of a header, descriptive text, and any number of action buttons.\r\n */\r\nconst Menu = ({ title, description, children }: Props) => {\r\n  const ref: RefObject<any> = createRef();\r\n\r\n  // Scroll to the top of the page when entering any new scene.\r\n  useEffect(() => {\r\n    ref.current.scrollTo(0, 0);\r\n  });\r\n\r\n  return (\r\n    <div className=\"menu\" ref={ref}>\r\n      <h1>{title}</h1>\r\n      <p className=\"description\">\r\n        {description}\r\n      </p>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState } from 'react';\r\nimport ActionButton from './ActionButton';\r\nimport Controller from './Controller';\r\nimport Footer from './Footer';\r\nimport Menu from './Menu';\r\nimport { GameState } from './GameState';\r\nimport type { Scene } from './Scenes';\r\nimport './App.css';\r\n\r\ntype Props = {\r\n  scenes: { [name: string]: Scene },\r\n  initialState: GameState\r\n}\r\n\r\n/**\r\n * Entry point for the game engine.  There should be no game-specific logic from this point on; all behavior\r\n * is driven by the data passed as props.\r\n */\r\nconst App = ({ scenes, initialState }: Props) => {\r\n  const [sceneId, setSceneId] = useState(initialState.sceneId);\r\n  const [inventory, setInventory] = useState(initialState.inventory);\r\n  const controller = new Controller({ initialState, sceneId, setSceneId, inventory, setInventory });\r\n  const scene = scenes[sceneId];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Menu\r\n        title={scene.name}\r\n        description={scene.description}\r\n      >\r\n        {scene.actions.map((action, index) => (\r\n          <ActionButton\r\n            action={action}\r\n            controller={controller}\r\n            key={`${action.text}_${index}`}\r\n          />\r\n        ))}\r\n      </Menu>\r\n      <Footer controller={controller} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Action, Scene } from './types';\r\nimport json from './scenes.json';\r\n\r\n/*\r\n * This is extremely tedious; we'll delete it once we integrate with json-schema\r\n */\r\n\r\ntype ScenesById = { [ name: string]: Scene };\r\n\r\nconst importScenes: () => ScenesById = () => {\r\n  const scenesById: ScenesById = {};\r\n  json.forEach(obj => {\r\n    const room = _validateScene(obj);\r\n    const { id } = room;\r\n    scenesById[id] = room;\r\n  });\r\n  _validateRefIntegrity(scenesById);\r\n  return scenesById;\r\n}\r\n\r\nconst _validateScene = (scene: any): Scene => {\r\n  _checkState(_isObject(scene), scene);\r\n  _checkState(scene.hasOwnProperty('id') && typeof scene.id === 'string', scene);\r\n  _checkState(scene.hasOwnProperty('name') && typeof scene.name === 'string', scene);\r\n  if (scene.hasOwnProperty('description')) {\r\n    _checkState(typeof scene.description === 'string', scene);\r\n  }\r\n  _checkState(scene.hasOwnProperty('actions') && Array.isArray(scene.actions), scene);\r\n  const actions = scene.actions.map((action: any) => _validateAction(action));\r\n\r\n  return {\r\n    ...scene,\r\n    actions\r\n  };\r\n};\r\n\r\nconst _validateAction = (action: any): Action => {\r\n  _checkState(action.hasOwnProperty('text') && typeof action.text === 'string', action);\r\n  if (action.hasOwnProperty('scene')) {\r\n    _checkState(typeof action.scene === 'string', action);\r\n  }\r\n  if (action.hasOwnProperty('requires')) {\r\n    _checkState(_isObject(action.requires), action);\r\n    if (action.requires.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.requires.items), action);\r\n      action.requires.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('forbids')) {\r\n    _checkState(_isObject(action.forbids), action);\r\n    if (action.forbids.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.forbids.items), action);\r\n      action.forbids.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('adds')) {\r\n    _checkState(_isObject(action.adds), action);\r\n    if (action.adds.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.adds.items), action);\r\n      action.adds.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('removes')) {\r\n    _checkState(_isObject(action.removes), action);\r\n    if (action.removes.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.removes.items), action);\r\n      action.removes.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  return action as Action;\r\n};\r\n\r\n/**\r\n * Validate that all references to scene ids are valid\r\n */\r\nconst _validateRefIntegrity = (scenes: ScenesById) => {\r\n  Object.values(scenes).forEach(room => {\r\n    room.actions.forEach(action => {\r\n      if (action.scene) {\r\n        _checkState(scenes[action.scene] != null, action);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @param obj The contents of the object being checked, for logging purposes\r\n */\r\nconst _checkState = (condition: boolean, obj: any): void => {\r\n  if (!condition) {\r\n    throw new Error(\"Invalid definition: \" + JSON.stringify(obj));\r\n  }\r\n}\r\n\r\nconst _isObject = (o: object) => {\r\n  return typeof o === 'object' && !Array.isArray(o);\r\n}\r\n\r\nexport { importScenes };\r\nexport type { Scene, Action };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { importScenes } from './Scenes';\r\nimport { GameState } from './GameState';\r\n\r\nconst scenes = importScenes();\r\nconst initialState: GameState = { sceneId: 'outside_front_door', inventory: [] };\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App scenes={scenes} initialState={initialState} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}