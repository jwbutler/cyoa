{"version":3,"sources":["Scenes.tsx","Menu.tsx","ActionButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_validateScene","scene","_checkState","_isObject","hasOwnProperty","id","name","description","Array","isArray","actions","map","action","_validateAction","text","requires","items","forEach","i","forbids","adds","removes","_validateRefIntegrity","scenes","Object","values","room","condition","obj","Error","JSON","stringify","o","Menu","title","children","className","ActionButton","onClick","scenesById","json","importScenes","App","useState","sceneId","setSceneId","inventory","setInventory","filter","every","item","includes","find","isActionVisible","updatedInventory","actionClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b57c761d.chunk.js","sourcesContent":["import json from './scenes.json';\r\n\r\n/*\r\n * This is extremely tedious; we'll delete it once we integrate with json-schema\r\n */\r\n\r\ninterface Scene {\r\n  id: string,\r\n  name: string,\r\n  description?: string,\r\n  actions: Action[]\r\n}\r\n\r\ntype Action = {\r\n  scene?: string,\r\n  text: string,\r\n  requires?: {\r\n    items?: string[]\r\n  },\r\n  forbids?: {\r\n    items?: string[]\r\n  },\r\n  adds?: {\r\n    items?: string[]\r\n  },\r\n  removes?: {\r\n    items?: string[]\r\n  }\r\n}\r\n\r\nconst importScenes: () => { [name: string]: Scene } = () => {\r\n  const scenesById: { [name: string]: Scene } = {};\r\n  json.forEach(obj => {\r\n    const room = _validateScene(obj);\r\n    const { id } = room;\r\n    scenesById[id] = room;\r\n  });\r\n  _validateRefIntegrity(scenesById);\r\n  return scenesById;\r\n}\r\n\r\nconst _validateScene = (scene: any): Scene => {\r\n  _checkState(_isObject(scene), scene);\r\n  _checkState(scene.hasOwnProperty('id') && typeof scene.id === 'string', scene);\r\n  _checkState(scene.hasOwnProperty('name') && typeof scene.name === 'string', scene);\r\n  if (scene.hasOwnProperty('description')) {\r\n    _checkState(typeof scene.description === 'string', scene);\r\n  }\r\n  _checkState(scene.hasOwnProperty('actions') && Array.isArray(scene.actions), scene);\r\n  const actions = scene.actions.map((action: any) => _validateAction(action));\r\n\r\n  return {\r\n    ...scene,\r\n    actions\r\n  };\r\n};\r\n\r\nconst _validateAction = (action: any): Action => {\r\n  _checkState(action.hasOwnProperty('text') && typeof action.text === 'string', action);\r\n  if (action.hasOwnProperty('scene')) {\r\n    _checkState(typeof action.scene === 'string', action);\r\n  }\r\n  if (action.hasOwnProperty('requires')) {\r\n    _checkState(_isObject(action.requires), action);\r\n    if (action.requires.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.requires.items), action);\r\n      action.requires.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('forbids')) {\r\n    _checkState(_isObject(action.forbids), action);\r\n    if (action.forbids.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.forbids.items), action);\r\n      action.forbids.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('adds')) {\r\n    _checkState(_isObject(action.adds), action);\r\n    if (action.adds.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.adds.items), action);\r\n      action.adds.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('removes')) {\r\n    _checkState(_isObject(action.removes), action);\r\n    if (action.removes.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.removes.items), action);\r\n      action.removes.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  return action as Action;\r\n};\r\n\r\n/**\r\n * Validate that all references to scene ids are valid\r\n */\r\nconst _validateRefIntegrity = (scenes: { [id: string]: Scene }) => {\r\n  Object.values(scenes).forEach(room => {\r\n    room.actions.forEach(action => {\r\n      if (action.scene) {\r\n        _checkState(scenes[action.scene] != null, action);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @param obj The contents of the object being checked, for logging purposes\r\n */\r\nconst _checkState = (condition: boolean, obj: any): void => {\r\n  if (!condition) {\r\n    throw new Error(\"Invalid definition: \" + JSON.stringify(obj));\r\n  }\r\n}\r\n\r\nconst _isObject = (o: object) => {\r\n  return typeof o === 'object' && !Array.isArray(o);\r\n}\r\n\r\nexport { importScenes };\r\nexport type { Scene, Action };\r\n","import React, { ReactElement } from 'react';\r\nimport ActionButton from './ActionButton';\r\nimport './Menu.css';\r\n\r\ntype Props = {\r\n  title: string,\r\n  description?: string,\r\n  children: ReactElement<typeof ActionButton>[]\r\n}\r\n\r\nconst Menu = ({ title, description, children }: Props) => (\r\n  <div className=\"menu\">\r\n    <h1>{title}</h1>\r\n    <div className=\"description\">\r\n      {description}\r\n    </div>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Menu;\r\n","import React, { ReactElement } from 'react';\r\nimport './ActionButton.css';\r\n\r\ntype Props = {\r\n  text: string,\r\n  onClick: () => void\r\n};\r\n\r\nconst ActionButton = ({ text, onClick }: Props): ReactElement<Props> =>  (\r\n  <div\r\n    key={text}\r\n    className=\"action\"\r\n    onClick={onClick}\r\n  >\r\n    {text}\r\n  </div>\r\n);\r\n\r\nexport default ActionButton;\r\n","import React, { useState } from 'react';\r\nimport { Action, importScenes } from './Scenes';\r\nimport Menu from './Menu';\r\nimport ActionButton from './ActionButton';\r\nimport './App.css';\r\n\r\nconst scenesById = importScenes();\r\nconst STARTING_SCENE_ID = 'outside_front_door';\r\n\r\nconst App = () => {\r\n  const [sceneId, setSceneId] = useState(STARTING_SCENE_ID);\r\n  const room = scenesById[sceneId];\r\n  const [inventory, setInventory] = useState([] as string[]);\r\n\r\n  const isActionVisible = (action: Action) => {\r\n    if (action.requires) {\r\n      if (action.requires.items) {\r\n        if (!action.requires.items.every(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (action.forbids) {\r\n      if (action.forbids.items) {\r\n        if (action.forbids.items.find(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const actionClick = (action: Action) => {\r\n    if (action.scene) {\r\n      setSceneId(action.scene);\r\n    }\r\n    if (action.adds) {\r\n      if (action.adds.items) {\r\n        // TODO: add distinct().  Doesn't matter since remove() will remove the duplicates\r\n        const updatedInventory = [...inventory, ...action.adds.items]\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n    if (action.removes) {\r\n      if (action.removes.items) {\r\n        // TODO: add distinct()\r\n        const { items } = action.removes;\r\n        const updatedInventory = inventory.filter(item => items && !items.includes(item));\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n      title={room.name}\r\n      description={room.description}\r\n    >\r\n      {\r\n        room.actions\r\n          .filter(action => isActionVisible(action))\r\n          .map(action => (\r\n            <ActionButton text={action.text} onClick={() => actionClick(action)} />\r\n          ))\r\n      }\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}