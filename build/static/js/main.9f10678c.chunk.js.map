{"version":3,"sources":["types/schemas lazy /^/.*$/ groupOptions: {} namespace object","types/validation.ts","types/Action.ts","types/Condition.ts","components/Button.tsx","components/ActionButton.tsx","types/GameState.ts","saveFile.ts","types/Controller.ts","components/Lightbox.tsx","components/Footer.tsx","components/Menu.tsx","components/App.tsx","types/Scene.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","assert","Ajv2020","condition","obj","JSON","stringify","isObject","Array","isArray","hasUnknownProperties","properties","every","k","includes","Type","Action","action","hasOwnProperty","text","values","type","scene","adds","items","forEach","i","removes","SCENE","controller","inventory","setInventory","setSceneId","filter","item","btoa","actions","getPriority","ACTION","ITEM","sort","a","b","Condition","requires","visited","v","forbids","description","validate","find","Button","size","onClick","children","rest","className","join","colors","ActionButton","execute","GameState","state","value","parse","atob","first","second","deserialize","serialize","localStorage","window","Controller","props","currentState","sceneId","load","restart","initialState","save","setSavedGame","setItem","Lightbox","title","body","x","ok","cancel","handleClose","Footer","savedGame","setLightbox","confirm","equals","disabled","Menu","ref","createRef","useEffect","current","scrollTo","App","scenes","useState","setVisited","lightbox","serialized","getItem","console","log","loadSavedGame","scenesById","mapper","toMap","create","push","conditions","evaluate","name","index","validateReferences","room","Scene","json","importScenes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iFAAA,IAAIA,EAAM,CACT,kBAAmB,CAClB,GACA,GAED,uBAAwB,CACvB,GACA,GAED,qBAAsB,CACrB,GACA,GAED,0BAA2B,CAC1B,GACA,GAED,iBAAkB,CACjB,GACA,GAED,sBAAuB,CACtB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,MAGnCX,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,IACzBI,EAAOC,QAAUhB,G,oPCfXiB,GA1BM,I,OAAIC,GA0BD,SAACC,EAAoBC,GAClC,IAAKD,EACH,MAAM,IAAIX,MAAM,uBAAyBa,KAAKC,UAAUF,MAItDG,EAAW,SAACpB,GAChB,MAAoB,kBAANA,IAAmBqB,MAAMC,QAAQtB,IAG3CuB,EAAuB,SAACvB,EAAWwB,GAAZ,OAC1Bb,OAAOD,KAAKV,GAAGyB,OAAM,SAAAC,GAAC,OAAIF,EAAWG,SAASD,Q,gBCpCnCE,G,SAAAA,K,cAAAA,E,YAAAA,E,iBAAAA,M,eADJC,M,QAoBAA,M,KACa,SAAG,SAACC,GA0BvB,OAzBAhB,EAAOgB,EAAOC,eAAe,SAAkC,kBAAhBD,EAAOE,KAAmBF,GACrEA,EAAOC,eAAe,SACxBjB,EAAOH,OAAOsB,OAAOJ,EAAOD,MAAMD,SAASG,EAAOI,MAAOJ,GAE3DhB,EAAOgB,EAAOC,eAAe,SAAUD,GACvChB,EAA+B,kBAAjBgB,EAAOK,MAAoBL,GAErCA,EAAOC,eAAe,UACxBjB,EAAOM,EAASU,EAAOM,MAAON,GAC1BA,EAAOM,KAAKL,eAAe,WAC7BjB,EAAOO,MAAMC,QAAQQ,EAAOM,KAAKC,OAAQP,GACzCA,EAAOM,KAAKC,MAAMC,SAAQ,SAACC,GAAD,OAAYzB,EAAoB,kBAANyB,EAAgBT,QAIpEA,EAAOC,eAAe,aACxBjB,EAAOM,EAASU,EAAOU,SAAUV,GAC7BA,EAAOU,QAAQT,eAAe,WAChCjB,EAAOO,MAAMC,QAAQQ,EAAOU,QAAQH,OAAQP,GAC5CA,EAAOU,QAAQH,MAAMC,SAAQ,SAACC,GAAD,OAAYzB,EAAoB,kBAANyB,EAAgBT,QAI3EhB,GAAQS,EAAqBO,EAAQ,CAAC,OAAQ,OAAQ,QAAS,OAAQ,YAAaA,GAE7E,2BACFA,GADL,IAEEI,KAAMJ,EAAOI,MAAQL,EAAOD,KAAKa,SAIjB,UAAG,SAACX,EAAgBY,GACtC,IAAQN,EAAyBN,EAAzBM,KAAMI,EAAmBV,EAAnBU,QAASL,EAAUL,EAAVK,MACfQ,EAAwCD,EAAxCC,UAAWC,EAA6BF,EAA7BE,aAAcC,EAAeH,EAAfG,WAIjC,GAHIV,GACFU,EAAWV,GAETC,EAAM,CACR,IAAQC,EAAUD,EAAVC,MACJA,GAGFO,EADsB,sBAAOD,GAAP,YAAqBN,KAI/C,GAAIG,EAAS,CACX,IAAQH,EAAUG,EAAVH,MACJA,GAGFO,EADyBD,EAAUG,QAAO,SAAAC,GAAI,OAAIV,IAAUA,EAAMV,SAASoB,SAM9D,SAAG,SAACjB,GAAD,OAAoBkB,KAAK9B,KAAKC,UAAUW,KAE7C,OAAG,SAACmB,GACnB,IAAMC,EAAc,SAACpB,GACnB,OAAQA,EAAOI,MACb,KAAKL,EAAOD,KAAKuB,OAAQ,OAAO,EAChC,KAAKtB,EAAOD,KAAKwB,KAAQ,OAAO,EAChC,KAAKvB,EAAOD,KAAKa,MAAQ,OAAO,IAIpCQ,EAAQI,MAAK,SAACC,EAAGC,GAAJ,OAAUL,EAAYK,GAAKL,EAAYI,OAIzCzB,I,IAAAA,K,EC9EL2B,M,KACa,SAAG,SAACxC,GAsCvB,OArCIA,EAAUe,eAAe,cAC3BjB,EAAOM,EAASJ,EAAUyC,UAAWzC,GACjCA,EAAUyC,SAAS1B,eAAe,WACpCjB,EAAOO,MAAMC,QAAQN,EAAUyC,SAASpB,OAAQrB,GAChDA,EAAUyC,SAASpB,MAAMC,SAAQ,SAACC,GAAD,OAAYzB,EAAoB,kBAANyB,EAAgBvB,OAEzEA,EAAUyC,SAAS1B,eAAe,aACpCjB,EAAOO,MAAMC,QAAQN,EAAUyC,SAASC,SAAU1C,GAClDA,EAAUyC,SAASC,QAAQpB,SAAQ,SAACqB,GAAD,OAAY7C,EAAoB,kBAAN6C,EAAgB3C,OAE/EF,GAAQS,EAAqBP,EAAUyC,SAAU,CAAC,QAAS,YAAazC,IAGtEA,EAAUe,eAAe,aAC3BjB,EAAOM,EAASJ,EAAU4C,SAAU5C,GAChCA,EAAU4C,QAAQ7B,eAAe,WACnCjB,EAAOO,MAAMC,QAAQN,EAAU4C,QAAQvB,OAAQrB,GAC/CA,EAAU4C,QAAQvB,MAAMC,SAAQ,SAACC,GAAD,OAAYzB,EAAoB,kBAANyB,EAAgBvB,OAExEA,EAAU4C,QAAQ7B,eAAe,aACnCjB,EAAOO,MAAMC,QAAQN,EAAU4C,QAAQF,SAAU1C,GACjDA,EAAU4C,QAAQF,QAAQpB,SAAQ,SAACqB,GAAD,OAAY7C,EAAoB,kBAAN6C,EAAgB3C,OAE9EF,GAAQS,EAAqBP,EAAU4C,QAAS,CAAC,QAAS,YAAa5C,IAGrEA,EAAUe,eAAe,gBAC3BjB,EAAwC,kBAA1BE,EAAU6C,YAA0B7C,GAGhDA,EAAUe,eAAe,aAC3BjB,EAAOO,MAAMC,QAAQN,EAAUiC,SAAUjC,GACzCA,EAAUiC,QAAQX,QAAQT,EAAOiC,WAGnChD,GAAQS,EAAqBP,EAAW,CAAC,WAAY,UAAW,UAAW,gBAAiBA,GAErFA,GAGY,WAAG,SAACA,EAAD,GAA+D,IAAtC2B,EAAqC,EAArCA,UAAWe,EAA0B,EAA1BA,QAC1D,GAAI1C,EAAUyC,SAAU,CACtB,GAAIzC,EAAUyC,SAASpB,QAChBrB,EAAUyC,SAASpB,MAAMZ,OAAM,SAAAsB,GAAI,OAAIJ,EAAUhB,SAASoB,MAC7D,OAAO,EAGX,GAAI/B,EAAUyC,SAASC,UAChB1C,EAAUyC,SAASC,QAAQjC,OAAM,SAAAU,GAAK,OAAIuB,EAAQ/B,SAASQ,MAC9D,OAAO,EAIb,GAAInB,EAAU4C,QAAS,CACrB,GAAI5C,EAAU4C,QAAQvB,OAChBrB,EAAU4C,QAAQvB,MAAM0B,MAAK,SAAAhB,GAAI,OAAIJ,EAAUhB,SAASoB,MAC1D,OAAO,EAGX,GAAI/B,EAAU4C,QAAQF,SAChB1C,EAAU4C,QAAQF,QAAQK,MAAK,SAAA5B,GAAK,OAAIuB,EAAQ/B,SAASQ,MAC3D,OAAO,EAIb,OAAO,GAIIqB,Q,uECtETQ,EAAS,SAAC,GAMF,IAAD,IALX9B,YAKW,MALJ,QAKI,MAJX+B,YAIW,MAJJ,SAII,EAHXC,EAGW,EAHXA,QACAC,EAEW,EAFXA,SACGC,EACQ,iBACLC,EAAY,CAAC,SAAUnC,EAAM+B,GAAMK,KAAK,KAC9C,OACE,gDACED,UAAWA,EACXH,QAASA,GACLE,GAHN,aAKGD,MAKGH,M,IAKKA,I,MAAAA,ICjCTO,GAAwC,mBAC3C1C,EAAOD,KAAKa,MAAQ,SADuB,cAE3CZ,EAAOD,KAAKuB,OAAS,cAFsB,cAG3CtB,EAAOD,KAAKwB,KAAO,cAHwB,GAuB/BoB,EAbM,SAAC,GAAmC,IAAjC1C,EAAgC,EAAhCA,OAAQY,EAAwB,EAAxBA,WACxBR,EAAOqC,EAAOzC,EAAOI,MAC3B,OACE,cAAC,EAAD,CACEA,KAAMA,EACN+B,KAAK,SACLC,QAAS,kBAAMrC,EAAO4C,QAAQ3C,EAAQY,IAHxC,SAKGZ,EAAOE,S,EClBJ0C,M,KAIc,UAAG,SAACC,GAAD,OAAsB3B,KAAK9B,KAAKC,UAAUwD,KAM3C,cAAG,SAACC,GAAD,OAAmB1D,KAAK2D,MAAMC,KAAKF,KAE3C,SAAG,SAACG,EAAyBC,GAA1B,OAAuD9D,KAAKC,UAAU4D,KAAW7D,KAAKC,UAAU6D,IAGzGN,I,EAAAA,ICtBPO,EAA2BP,EAA3BO,YAAaC,EAAcR,EAAdQ,UACbC,EAAiBC,OAAjBD,cC8BEE,M,KACW,OAAG,SAACC,GACrB,IAAMC,EAA0B,CAC9BC,QAASF,EAAME,QACf7C,UAAW2C,EAAM3C,UACjBe,QAAS4B,EAAM5B,SAGX+B,EAAO,SAAC,GAAgD,IAA9CD,EAA6C,EAA7CA,QAAS7C,EAAoC,EAApCA,UACfE,GADmD,EAAzBa,QACG4B,EAA7BzC,YAAYD,EAAiB0C,EAAjB1C,aACpBC,EAAW2C,GACX5C,EAAaD,IAWf,OAAO,2BACF2C,GADL,IAEEC,eACAE,OACAC,QAZc,kBAAMD,EAAKH,EAAMK,eAa/BC,KAXW,WACX,IDjCQjB,ECiCAkB,EAAiBP,EAAjBO,aDjCAlB,ECkCCY,EDlCoBJ,EAAaW,QAAQ,OAAQZ,EAAUP,ICmCpEkB,EAAaN,OAaJF,I,EAAAA,ICXAU,G,OAzCE,SAAC,GAAD,IACfC,EADe,EACfA,MACAC,EAFe,EAEfA,KAFe,IAGfC,SAHe,aAIfC,UAJe,aAKfC,cALe,SAMfC,EANe,EAMfA,YANe,OAQf,qCAEE,qBAAKhC,UAAU,wBACf,sBAAKA,UAAU,WAAf,UACG6B,GACC,qBAAK7B,UAAU,aAAaH,QAAS,kBAAMmC,GAAY,IAAvD,kBAEF,oBAAIhC,UAAU,iBAAd,SACG2B,GAAS,MAEXC,GACC,mBAAG5B,UAAU,gBAAb,SACG4B,KAGHE,GAAMC,IACN,qCACGD,GACC,cAAC,EAAD,CAAQjE,KAAK,QAAQ+B,KAAK,SAASC,QAAS,kBAAMmC,GAAY,IAA9D,gBAIDD,GACC,cAAC,EAAD,CAAQlE,KAAK,QAAQ+B,KAAK,SAASC,QAAS,kBAAMmC,GAAY,IAA9D,+BC8FGC,G,OA/HA,SAAC,GAA2B,IAAzB5D,EAAwB,EAAxBA,WA0BV+C,EAAO,WACP/C,EAAW6D,WACb7D,EAAW+C,KAAK/C,EAAW6D,WAC3B7D,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,eACNE,GAAG,EACHG,YAAa,kBAAM3D,EAAW8D,YAAY,YAI9C9D,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,QACNC,KAAK,uBACLC,GAAG,EACHG,YAAa,kBAAM3D,EAAW8D,YAAY,UAG9C9D,EAAWmD,aAAa,QA0BtBD,EAAO,WACXlD,EAAWkD,OACXlD,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,cACNE,GAAG,EACHG,YAAa,kBAAM3D,EAAW8D,YAAY,WAsBhD,OACE,sBAAKnC,UAAU,SAAf,UACE,cAAC,EAAD,CACEnC,KAAK,QACL+B,KAAK,QACLC,QAtBgB,WACpBxB,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,gBACNC,KAAK,sCACLC,GAAG,EACHE,QAAQ,EACRC,YAAe,SAACI,GACVA,GACF/D,EAAWgD,UAEbhD,EAAW8D,YAAY,WAQ3B,iBAOA,cAAC,EAAD,CACEtE,KAAK,QACL+B,KAAK,QACLC,QA9Da,WACZQ,EAAUgC,OAAOhE,EAAW6C,aAAc7C,EAAW6D,WAiBxDX,IAhBAlD,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,gBACNC,KAAK,+CACLC,GAAG,EACHE,QAAQ,EACRC,YAAe,SAACI,GACVA,EACFb,IAEAlD,EAAW8D,YAAY,WA+C/B,kBAOA,cAAC,EAAD,CACEtE,KAAK,QACL+B,KAAK,QACLC,QArHa,WAEfQ,EAAUgC,OAAOhE,EAAW6C,aAAc7C,EAAW6D,YAClD7B,EAAUgC,OAAOhE,EAAW6C,aAAc7C,EAAWiD,cAExDF,IAEA/C,EAAW8D,YACT,cAAC,EAAD,CACER,MAAM,gBACNC,KAAK,sCACLC,GAAG,EACHE,QAAQ,EACRC,YAAe,SAACI,GACVA,EACFhB,IAEA/C,EAAW8D,YAAY,WAqG7BG,UAAWjE,EAAW6D,UAJxB,uBC9FSK,G,OAnBF,SAAC,GAA6C,IAA3CZ,EAA0C,EAA1CA,MAAOnC,EAAmC,EAAnCA,YAAaM,EAAsB,EAAtBA,SAC5B0C,EAAsBC,sBAO5B,OAJAC,qBAAU,WACRF,EAAIG,QAAQC,SAAS,EAAG,MAIxB,sBAAK5C,UAAU,OAAOwC,IAAKA,EAA3B,UACE,oBAAIxC,UAAU,aAAd,SAA4B2B,IAC5B,mBAAG3B,UAAU,mBAAb,SACGR,IAEFM,OCyDQ+C,G,OAvDH,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,OAAQxB,EAA0B,EAA1BA,aACrB,EAA8ByB,mBAASzB,EAAaH,SAApD,mBAAOA,EAAP,KAAgB3C,EAAhB,KACA,EAAkCuE,mBAASzB,EAAahD,WAAxD,mBAAOA,EAAP,KAAkBC,EAAlB,KACA,EAA8BwE,mBAAS,IAAvC,mBAAO1D,EAAP,KAAgB2D,EAAhB,KACA,EAAgCD,mBAAS,MAAzC,mBAAOE,EAAP,KAAiBd,EAAjB,KACA,EAAkCY,mBL7BvB,WACX,IAAMG,EAAapC,EAAaqC,QAAQ,QACxC,GAAID,EACF,IACE,OAAOtC,EAAYsC,GACnB,MAAOnH,GACPqH,QAAQC,IAAItH,GAGhB,OAAO,KKoBoCuH,IAA3C,mBAAOpB,EAAP,KAAkBV,EAAlB,KACM+B,EAlBM,SAAMvF,EAAYwF,GAC9B,IAAMjI,EAA4B,GAIlC,OAHAyC,EAAMC,SAAQ,SAAAS,GACZnD,EAAIiI,EAAO9E,IAASA,KAEfnD,EAaqCkI,CAAMX,GAAQ,SAAAhF,GAAK,OAAIA,EAAM3B,MAEnEkC,EAAyB2C,EAAW0C,OAAO,CAC/CpC,eACAH,UAAS3C,aACTF,YAAWC,eACXc,UAAS2D,aACTC,WAAUd,cACVD,YAAWV,iBAGP1D,EAAQyF,EAAWpC,GAEpB9B,EAAQ/B,SAAS6D,IACpB9B,EAAQsE,KAAKxC,GAGf,IAAM3B,EAAgB1B,EAAhB0B,YACAZ,EAAO,YAAOd,EAAMc,SAAW,IAWrC,OAVA,UAAAd,EAAM8F,kBAAN,SAAkB3F,SAAQ,SAAAtB,GACwB,IAAD,EAA3CwC,EAAU0E,SAASlH,EAAW0B,KACvB,OAAT1B,QAAS,IAATA,GAAA,UAAAA,EAAWiC,eAAX,SAAoBX,SAAQ,SAAAR,GAAM,OAAImB,EAAQ+E,KAAKlG,MAEnD+B,EAAcA,GAAe7C,EAAU6C,gBAI3ChC,EAAOwB,KAAKJ,GAGV,sBAAKoB,UAAU,MAAf,UACE,cAAC,EAAD,CACE2B,MAAO7D,EAAMgG,KACbtE,YAAaA,EAFf,SAIGZ,EAAQrD,KAAI,SAACkC,EAAQsG,GAAT,OACX,cAAC,EAAD,CACEtG,OAAQA,EACRY,WAAYA,GAFd,UAGUZ,EAAOE,KAHjB,YAGyBoG,SAI7B,cAAC,EAAD,CAAQ1F,WAAYA,IACnB4E,O,QCnDDe,EAAqB,SAAClB,GAC1BxG,OAAOsB,OAAOkF,GAAQ7E,SAAQ,SAAAgG,GAAS,IAAD,IAC9BrF,EAAoB,GAC1B,UAAAqF,EAAKrF,eAAL,SAAcX,SAAQ,SAAAR,GAAM,OAAImB,EAAQ+E,KAAKlG,MAC7C,UAAAwG,EAAKL,kBAAL,SAAiB3F,SAAQ,SAAAtB,GAAS,oBAChCA,QADgC,IAChCA,GADgC,UAChCA,EAAWiC,eADqB,aAChC,EAAoBX,SAAQ,SAAAR,GAAM,OAAImB,EAAQ+E,KAAKlG,SAErDmB,EAAQX,SAAQ,SAAAR,GACVA,EAAOK,OACTrB,EAA+B,MAAxBqG,EAAOrF,EAAOK,OAAgBL,WAMnCyG,M,KACa,SAAG,SAACpG,GACvBrB,EAAOM,EAASe,GAAQA,GACxBrB,EAAOqB,EAAMJ,eAAe,OAA6B,kBAAbI,EAAM3B,GAAiB2B,GACnErB,EAAOqB,EAAMJ,eAAe,SAAiC,kBAAfI,EAAMgG,KAAmBhG,GAEnEA,EAAMJ,eAAe,gBACvBjB,EAAoC,kBAAtBqB,EAAM0B,YAA0B1B,GAGhD,IAAMc,EAAoB,GACtBd,EAAMJ,eAAe,aACvBjB,EAAOO,MAAMC,QAAQa,EAAMc,SAAUd,GACrCA,EAAMc,QAAQX,SAAQ,SAACR,GAAD,OAAiBmB,EAAQ+E,KAAKnG,EAAOiC,SAAShC,QAItE,IAAMmG,EAA0B,GAQhC,OAPI9F,EAAMJ,eAAe,gBACvBjB,EAAOO,MAAMC,QAAQa,EAAM8F,YAAa9F,GACxCA,EAAM8F,WAAW3F,SAAQ,SAACtB,GAAD,OAAoBiH,EAAWD,KAAKxE,EAAUM,SAAS9C,QAGlFF,GAAQS,EAAqBY,EAAO,CAAC,KAAM,OAAQ,cAAe,UAAW,eAAgBA,GAEtF,2BACFA,GADL,IAEEc,UACAgF,gB,OAKSM,ICrETpB,EDO8B,WAClC,IAAMS,EAAuC,GAO7C,OANAY,EAAKlG,SAAQ,SAAArB,GACX,IAAMkB,EAAQoG,EAAMzE,SAAS7C,GACrBT,EAAO2B,EAAP3B,GACRoH,EAAWpH,GAAM2B,KAEnBkG,EAAmBT,GACZjH,OAAOsB,OAAO2F,GCfRa,GAOfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKzB,OAAQA,EAAQxB,aARO,CAC9BH,QAAS,qBACT7C,UAAW,GACXe,QAAS,QAOTmF,SAASC,eAAe,U","file":"static/js/main.9f10678c.chunk.js","sourcesContent":["var map = {\n\t\"./Action.schema\": [\n\t\t55,\n\t\t0\n\t],\n\t\"./Action.schema.json\": [\n\t\t55,\n\t\t0\n\t],\n\t\"./Condition.schema\": [\n\t\t56,\n\t\t1\n\t],\n\t\"./Condition.schema.json\": [\n\t\t56,\n\t\t1\n\t],\n\t\"./Scene.schema\": [\n\t\t57,\n\t\t2\n\t],\n\t\"./Scene.schema.json\": [\n\t\t57,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 136;\nmodule.exports = webpackAsyncContext;","import { ValidateFunction } from 'ajv';\r\nimport Ajv2020 from 'ajv/dist/2020';\r\n\r\nconst ajv = new Ajv2020();\r\n\r\nconst validators: { [path: string]: ValidateFunction<unknown> } = {};\r\n\r\n/*\r\n * TODO: This doesn't work.  Need to figure out how to handle schema references.\r\n */\r\nconst validateSchema = (object: object, schemaFilename: string): Promise<boolean> => {\r\n  let validator: ValidateFunction<unknown>;\r\n  if (validators[schemaFilename]) {\r\n    validator = validators[schemaFilename];\r\n    return Promise.resolve(validator(object));\r\n  } else {\r\n    return import(`./schemas/${schemaFilename}`)\r\n      .then(json => json.default)\r\n      .then(schema => ajv.compile(schema))\r\n      .then((validate: ValidateFunction) => {\r\n        validators[schemaFilename] = validate;\r\n        return validate(object);\r\n      });\r\n  }\r\n};\r\n\r\n/**\r\n * @param obj The contents of the object being checked, for logging purposes\r\n */\r\nconst assert = (condition: boolean, obj: any): void => {\r\n  if (!condition) {\r\n    throw new Error(\"Invalid definition: \" + JSON.stringify(obj));\r\n  }\r\n};\r\n\r\nconst isObject = (o: object) => {\r\n  return typeof o === 'object' && !Array.isArray(o);\r\n};\r\n\r\nconst hasUnknownProperties = (o: object, properties: string[]) =>\r\n  !Object.keys(o).every(k => properties.includes(k));\r\n\r\nexport {\r\n  assert,\r\n  hasUnknownProperties,\r\n  isObject,\r\n  validateSchema\r\n};\r\n","import Controller from './Controller';\r\nimport { assert, hasUnknownProperties, isObject } from './validation';\r\n\r\nnamespace Action {\r\n  export enum Type {\r\n    SCENE = 'scene',\r\n    ITEM = 'item',\r\n    ACTION = 'action'\r\n  }\r\n}\r\n\r\ntype Action = {\r\n  readonly text: string,\r\n  readonly type: Action.Type,\r\n  readonly scene: string,\r\n  readonly adds?: {\r\n    readonly items?: ReadonlyArray<string>\r\n  },\r\n  readonly removes?: {\r\n    readonly items?: ReadonlyArray<string>\r\n  }\r\n};\r\n\r\nnamespace Action {\r\n  export const validate = (action: any): Action => {\r\n    assert(action.hasOwnProperty('text') && typeof action.text === 'string', action);\r\n    if (action.hasOwnProperty('type')) {\r\n      assert(Object.values(Action.Type).includes(action.type), action);\r\n    }\r\n    assert(action.hasOwnProperty('scene'), action);\r\n    assert(typeof action.scene === 'string', action);\r\n\r\n    if (action.hasOwnProperty('adds')) {\r\n      assert(isObject(action.adds), action);\r\n      if (action.adds.hasOwnProperty('items')) {\r\n        assert(Array.isArray(action.adds.items), action);\r\n        action.adds.items.forEach((i: any) => assert(typeof i === 'string', action));\r\n      }\r\n    }\r\n\r\n    if (action.hasOwnProperty('removes')) {\r\n      assert(isObject(action.removes), action);\r\n      if (action.removes.hasOwnProperty('items')) {\r\n        assert(Array.isArray(action.removes.items), action);\r\n        action.removes.items.forEach((i: any) => assert(typeof i === 'string', action));\r\n      }\r\n    }\r\n\r\n    assert(!hasUnknownProperties(action, ['text', 'type', 'scene', 'adds', 'removes']), action);\r\n\r\n    return {\r\n      ...action,\r\n      type: action.type || Action.Type.SCENE\r\n    };\r\n  };\r\n\r\n  export const execute = (action: Action, controller: Controller) => {\r\n    const { adds, removes, scene } = action;\r\n    const { inventory, setInventory, setSceneId } = controller;\r\n    if (scene) {\r\n      setSceneId(scene);\r\n    }\r\n    if (adds) {\r\n      const { items } = adds;\r\n      if (items) {\r\n        // TODO: add distinct().  Doesn't matter since remove() will remove the duplicates\r\n        const updatedInventory = [...inventory, ...items];\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n    if (removes) {\r\n      const { items } = removes;\r\n      if (items) {\r\n        // TODO: add distinct()\r\n        const updatedInventory = inventory.filter(item => items && !items.includes(item));\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  export const getKey = (action: Action) => btoa(JSON.stringify(action));\r\n\r\n  export const sort = (actions: Action[]) => {\r\n    const getPriority = (action: Action): number => {\r\n      switch (action.type) {\r\n        case Action.Type.ACTION: return 2;\r\n        case Action.Type.ITEM:   return 1;\r\n        case Action.Type.SCENE:  return 0;\r\n      }\r\n    };\r\n\r\n    actions.sort((a, b) => getPriority(b) - getPriority(a));\r\n  };\r\n}\r\n\r\nexport default Action;\r\n","import type Controller from './Controller';\r\nimport { assert, hasUnknownProperties, isObject } from './validation';\r\nimport Action from './Action';\r\n\r\ntype Condition = {\r\n  readonly requires?: {\r\n    readonly items?: ReadonlyArray<string>,\r\n    readonly visited?: ReadonlyArray<string>\r\n  },\r\n  readonly forbids?: {\r\n    readonly items?: ReadonlyArray<string>,\r\n    readonly visited?: ReadonlyArray<string>\r\n  },\r\n  readonly actions?: ReadonlyArray<Action>,\r\n  readonly description?: string\r\n};\r\n\r\nnamespace Condition {\r\n  export const validate = (condition: any): Condition => {\r\n    if (condition.hasOwnProperty('requires')) {\r\n      assert(isObject(condition.requires), condition);\r\n      if (condition.requires.hasOwnProperty('items')) {\r\n        assert(Array.isArray(condition.requires.items), condition);\r\n        condition.requires.items.forEach((i: any) => assert(typeof i === 'string', condition));\r\n      }\r\n      if (condition.requires.hasOwnProperty('visited')) {\r\n        assert(Array.isArray(condition.requires.visited), condition);\r\n        condition.requires.visited.forEach((v: any) => assert(typeof v === 'string', condition))\r\n      }\r\n      assert(!hasUnknownProperties(condition.requires, ['items', 'visited']), condition);\r\n    }\r\n\r\n    if (condition.hasOwnProperty('forbids')) {\r\n      assert(isObject(condition.forbids), condition);\r\n      if (condition.forbids.hasOwnProperty('items')) {\r\n        assert(Array.isArray(condition.forbids.items), condition);\r\n        condition.forbids.items.forEach((i: any) => assert(typeof i === 'string', condition));\r\n      }\r\n      if (condition.forbids.hasOwnProperty('visited')) {\r\n        assert(Array.isArray(condition.forbids.visited), condition);\r\n        condition.forbids.visited.forEach((v: any) => assert(typeof v === 'string', condition))\r\n      }\r\n      assert(!hasUnknownProperties(condition.forbids, ['items', 'visited']), condition);\r\n    }\r\n\r\n    if (condition.hasOwnProperty('description')) {\r\n      assert(typeof condition.description === 'string', condition);\r\n    }\r\n\r\n    if (condition.hasOwnProperty('actions')) {\r\n      assert(Array.isArray(condition.actions), condition);\r\n      condition.actions.forEach(Action.validate);\r\n    }\r\n\r\n    assert(!hasUnknownProperties(condition, ['requires', 'forbids', 'actions', 'description']), condition);\r\n\r\n    return condition as Condition;\r\n  };\r\n\r\n  export const evaluate = (condition: Condition, { inventory, visited }: Controller) => {\r\n    if (condition.requires) {\r\n      if (condition.requires.items) {\r\n        if (!condition.requires.items.every(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n      if (condition.requires.visited) {\r\n        if (!condition.requires.visited.every(scene => visited.includes(scene))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (condition.forbids) {\r\n      if (condition.forbids.items) {\r\n        if (condition.forbids.items.find(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n      if (condition.forbids.visited) {\r\n        if (condition.forbids.visited.find(scene => visited.includes(scene))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default Condition;\r\n","import React, { ReactNode } from 'react';\r\nimport './Button.css';\r\n\r\ntype ButtonType = 'white' | 'white_blue' | 'blue';\r\ntype ButtonSize = 'medium' | 'small';\r\n\r\ntype Props = {\r\n  type?: ButtonType,\r\n  size?: ButtonSize,\r\n  onClick?: () => void,\r\n  disabled?: boolean,\r\n  children: ReactNode\r\n};\r\n\r\n/**\r\n * Core UI component representing a button.  This defines a number of styles for standard button types.\r\n * This component should be used for all buttons throughout the application to maintain a unified look and feel.\r\n */\r\nconst Button = ({\r\n  type = 'white',\r\n  size = 'medium',\r\n  onClick,\r\n  children,\r\n  ...rest\r\n}: Props) => {\r\n  const className = ['button', type, size].join(' ');\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={onClick}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nnamespace Button {\r\n  export type Type = ButtonType;\r\n  export type Size = ButtonSize;\r\n}\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\nimport Action from '../types/Action';\r\nimport Controller from '../types/Controller';\r\n\r\ntype Props = {\r\n  action: Action,\r\n  controller: Controller\r\n};\r\n\r\nconst colors: Record<Action.Type, Button.Type> = {\r\n  [Action.Type.SCENE]: 'white',\r\n  [Action.Type.ACTION]: 'white_blue',\r\n  [Action.Type.ITEM]: 'white_blue'\r\n};\r\n\r\n/**\r\n * Conditionally displays a {@link Button}, based on a particular {@link Action}, with an appropriate onClick handler\r\n * that executes the appropriate logic defined by the action.\r\n */\r\nconst ActionButton = ({ action, controller }: Props) => {\r\n  const type = colors[action.type];\r\n  return (\r\n    <Button\r\n      type={type}\r\n      size=\"medium\"\r\n      onClick={() => Action.execute(action, controller)}\r\n    >\r\n      {action.text}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default ActionButton;\r\n","/**\r\n * Using some declaration merging tricks to create \"static methods\" on the type\r\n */\r\ntype GameState = {\r\n  readonly sceneId: string,\r\n  readonly inventory: string[],\r\n  readonly visited: string[]\r\n};\r\n\r\nnamespace GameState {\r\n  /**\r\n   * Serialize the contents of {@link GameState} to JSON, and then base-64 encode the result.\r\n   */\r\n  export const serialize = (state: GameState) => btoa(JSON.stringify(state));\r\n\r\n  /**\r\n   * Decode the specified base64 string that represents a {@link GameState} object, and then parse it as JSON.\r\n   * TODO: Validate the result using json-schema\r\n   */\r\n  export const deserialize = (value: string) => JSON.parse(atob(value)) as GameState;\r\n\r\n  export const equals = (first: GameState | null, second: GameState | null) => JSON.stringify(first) === JSON.stringify(second);\r\n}\r\n\r\nexport default GameState;\r\n","import GameState from './types/GameState';\r\n\r\nconst { deserialize, serialize } = GameState;\r\nconst { localStorage } = window;\r\n\r\nconst load = (): (GameState | null) => {\r\n  const serialized = localStorage.getItem('save');\r\n  if (serialized) {\r\n    try {\r\n      return deserialize(serialized) as GameState;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst save = (state: GameState) => localStorage.setItem('save', serialize(state));\r\n\r\nconst exists = () => !!localStorage.getItem('save');\r\n\r\nexport {\r\n  load,\r\n  save,\r\n  exists\r\n};\r\n","import type { ReactElement } from 'react';\r\nimport GameState from './GameState';\r\nimport { Consumer } from './types';\r\nimport { save as saveFile } from '../saveFile';\r\n\r\ninterface Props {\r\n  readonly initialState: GameState,\r\n  readonly sceneId: string,\r\n  readonly setSceneId: Consumer<string>,\r\n  readonly inventory: string[],\r\n  readonly setInventory: Consumer<string[]>,\r\n  readonly visited: string[],\r\n  readonly setVisited: Consumer<string[]>,\r\n  readonly lightbox: ReactElement | null,\r\n  readonly setLightbox: Consumer<ReactElement | null>,\r\n  readonly savedGame: GameState | null,\r\n  readonly setSavedGame: Consumer<GameState | null>,\r\n}\r\n\r\n/**\r\n * Core state management class which encapsulates the result of various {@link React#useState} hooks.\r\n * This is passed from the parent component ({@link App}) to its children, rather than passing individual\r\n * state elements and callback functions.\r\n *\r\n * Using some declaration merging tricks to create \"static methods\" on the type\r\n */\r\ninterface Controller extends Props {\r\n  readonly currentState: GameState;\r\n  readonly load: Consumer<GameState>;\r\n  readonly restart: () => void;\r\n  readonly save: () => void;\r\n}\r\n\r\nnamespace Controller {\r\n  export const create = (props: Props) => {\r\n    const currentState: GameState = {\r\n      sceneId: props.sceneId,\r\n      inventory: props.inventory,\r\n      visited: props.visited\r\n    };\r\n\r\n    const load = ({ sceneId, inventory, visited }: GameState) => {\r\n      const { setSceneId, setInventory } = props;\r\n      setSceneId(sceneId);\r\n      setInventory(inventory);\r\n    };\r\n\r\n    const restart = () => load(props.initialState);\r\n\r\n    const save = () => {\r\n      const { setSavedGame } = props;\r\n      saveFile(currentState);\r\n      setSavedGame(currentState);\r\n    };\r\n\r\n    return {\r\n      ...props,\r\n      currentState,\r\n      load,\r\n      restart,\r\n      save,\r\n    };\r\n  };\r\n}\r\n\r\nexport default Controller;\r\n","import Button from './Button';\r\nimport './Lightbox.css';\r\nimport { Consumer } from '../types/types';\r\n\r\ntype Props = {\r\n  title?: string,\r\n  body?: string,\r\n  x?: boolean,\r\n  ok?: boolean,\r\n  cancel?: boolean,\r\n  handleClose: Consumer<boolean>\r\n};\r\n\r\nconst Lightbox = ({\r\n  title,\r\n  body,\r\n  x = true,\r\n  ok = true,\r\n  cancel = false,\r\n  handleClose\r\n}: Props) => (\r\n  <>\r\n    {/* Don't nest this inside the lightbox for CSS reasons */}\r\n    <div className=\"lightbox-background\" />\r\n    <div className=\"lightbox\">\r\n      {x && (\r\n        <div className=\"lightbox-x\" onClick={() => handleClose(false)}>×</div>\r\n      )}\r\n      <h2 className=\"lightbox-title\">\r\n        {title || ' '}\r\n      </h2>\r\n      {body && (\r\n        <p className=\"lightbox-body\">\r\n          {body}\r\n        </p>\r\n      )}\r\n      {(ok || cancel) && (\r\n        <>\r\n          {ok && (\r\n            <Button type=\"white\" size=\"medium\" onClick={() => handleClose(true)}>\r\n              OK\r\n            </Button>\r\n          )}\r\n          {cancel && (\r\n            <Button type=\"white\" size=\"medium\" onClick={() => handleClose(false)}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Lightbox;\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport Controller from '../types/Controller';\r\nimport Lightbox from './Lightbox';\r\nimport GameState from '../types/GameState';\r\nimport './Footer.css';\r\n\r\ntype Props = {\r\n  controller: Controller\r\n}\r\n\r\nconst Footer = ({ controller }: Props) => {\r\n  const loadPrompt = () => {\r\n    if (\r\n      GameState.equals(controller.currentState, controller.savedGame)\r\n      || GameState.equals(controller.currentState, controller.initialState)\r\n    ) {\r\n      load();\r\n    } else {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Are you sure?\"\r\n          body=\"You will lose any unsaved progress.\"\r\n          x={false}\r\n          cancel={true}\r\n          handleClose = {(confirm) => {\r\n            if (confirm) {\r\n              load();\r\n            } else {\r\n              controller.setLightbox(null);\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const load = () => {\r\n    if (controller.savedGame) {\r\n      controller.load(controller.savedGame);\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Game loaded.\"\r\n          x={false}\r\n          handleClose={() => controller.setLightbox(null)}\r\n        />\r\n      );\r\n    } else {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Error\"\r\n          body=\"No saved game found.\"\r\n          x={false}\r\n          handleClose={() => controller.setLightbox(null)}\r\n        />\r\n      );\r\n      controller.setSavedGame(null);\r\n    }\r\n  };\r\n\r\n  const savePrompt = () => {\r\n    if (!GameState.equals(controller.currentState, controller.savedGame)) {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Are you sure?\"\r\n          body=\"You will overwrite your existing saved game.\"\r\n          x={false}\r\n          cancel={true}\r\n          handleClose = {(confirm) => {\r\n            if (confirm) {\r\n              save();\r\n            } else {\r\n              controller.setLightbox(null);\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      save();\r\n    }\r\n  };\r\n\r\n  const save = () => {\r\n    controller.save();\r\n    controller.setLightbox(\r\n      <Lightbox\r\n        title=\"Game saved.\"\r\n        x={false}\r\n        handleClose={() => controller.setLightbox(null)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const restartPrompt = () => {\r\n    controller.setLightbox(\r\n      <Lightbox\r\n        title=\"Are you sure?\"\r\n        body=\"You will lose any unsaved progress.\"\r\n        x={false}\r\n        cancel={true}\r\n        handleClose = {(confirm) => {\r\n          if (confirm) {\r\n            controller.restart();\r\n          }\r\n          controller.setLightbox(null);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={restartPrompt}\r\n      >\r\n        New\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={savePrompt}\r\n      >\r\n        Save\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={loadPrompt}\r\n        disabled={!controller.savedGame}\r\n      >\r\n        Load\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { createRef, ReactNode, RefObject, useEffect } from 'react';\r\nimport './Menu.css';\r\n\r\ntype Props = {\r\n  title: string,\r\n  description?: string,\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * Represents the core decision display of the application.\r\n * This consists of a header, descriptive text, and any number of action buttons.\r\n */\r\nconst Menu = ({ title, description, children }: Props) => {\r\n  const ref: RefObject<any> = createRef();\r\n\r\n  // Scroll to the top of the page when entering any new scene.\r\n  useEffect(() => {\r\n    ref.current.scrollTo(0, 0);\r\n  });\r\n\r\n  return (\r\n    <div className=\"menu\" ref={ref}>\r\n      <h1 className=\"menu-title\">{title}</h1>\r\n      <p className=\"menu-description\">\r\n        {description}\r\n      </p>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { ReactElement, useState } from 'react';\r\nimport Action from '../types/Action';\r\nimport Condition from '../types/Condition';\r\nimport ActionButton from './ActionButton';\r\nimport Controller from '../types/Controller';\r\nimport Footer from './Footer';\r\nimport Menu from './Menu';\r\nimport GameState from '../types/GameState';\r\nimport Scene from '../types/Scene';\r\nimport './App.css';\r\nimport { load as loadSavedGame } from '../saveFile';\r\n\r\ntype Props = {\r\n  scenes: Scene[],\r\n  initialState: GameState\r\n}\r\n\r\nconst toMap = <T, >(items: T[], mapper: (item: T) => string): { [key: string]: T } => {\r\n  const map: { [key: string]: T } = {};\r\n  items.forEach(item => {\r\n    map[mapper(item)] = item;\r\n  });\r\n  return map;\r\n};\r\n\r\n/**\r\n * Entry point for the game engine.  There should be no game-specific logic from this point on; all behavior\r\n * is driven by the data passed as props.\r\n */\r\nconst App = ({ scenes, initialState }: Props) => {\r\n  const [sceneId, setSceneId] = useState(initialState.sceneId);\r\n  const [inventory, setInventory] = useState(initialState.inventory);\r\n  const [visited, setVisited] = useState([] as string[]);\r\n  const [lightbox, setLightbox] = useState(null as (ReactElement | null));\r\n  const [savedGame, setSavedGame] = useState(loadSavedGame());\r\n  const scenesById: { [id: string]: Scene } = toMap(scenes, scene => scene.id);\r\n\r\n  const controller: Controller = Controller.create({\r\n    initialState,\r\n    sceneId, setSceneId,\r\n    inventory, setInventory,\r\n    visited, setVisited,\r\n    lightbox, setLightbox,\r\n    savedGame, setSavedGame\r\n  });\r\n\r\n  const scene = scenesById[sceneId];\r\n\r\n  if (!visited.includes(sceneId)) {\r\n    visited.push(sceneId);\r\n  }\r\n\r\n  let { description } = scene;\r\n  const actions = [...scene.actions || []];\r\n  scene.conditions?.forEach(condition => {\r\n    if (Condition.evaluate(condition, controller)) {\r\n      condition?.actions?.forEach(action => actions.push(action));\r\n      // TODO - this assumes conditions are mutually exclusive\r\n      description = description || condition.description;\r\n    }\r\n  });\r\n\r\n  Action.sort(actions);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Menu\r\n        title={scene.name}\r\n        description={description}\r\n      >\r\n        {actions.map((action, index) => (\r\n          <ActionButton\r\n            action={action}\r\n            controller={controller}\r\n            key={`${action.text}_${index}`}\r\n          />\r\n        ))}\r\n      </Menu>\r\n      <Footer controller={controller} />\r\n      {lightbox}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import json from '../scenes.json';\r\n\r\nimport Action from './Action';\r\nimport Condition from './Condition';\r\nimport { assert, hasUnknownProperties, isObject } from './validation';\r\n\r\ntype Scene = {\r\n  readonly id: string,\r\n  readonly name: string,\r\n  readonly description?: string,\r\n  readonly actions?: ReadonlyArray<Action>,\r\n  readonly conditions?: ReadonlyArray<Condition>\r\n}\r\n\r\nconst importScenes: () => Scene[] = () => {\r\n  const scenesById: { [ id: string]: Scene } = {};\r\n  json.forEach(obj => {\r\n    const scene = Scene.validate(obj);\r\n    const { id } = scene;\r\n    scenesById[id] = scene;\r\n  });\r\n  validateReferences(scenesById);\r\n  return Object.values(scenesById);\r\n};\r\n\r\n/**\r\n * Validate that all references to scene names are valid\r\n */\r\nconst validateReferences = (scenes: { [ id: string]: Scene }) => {\r\n  Object.values(scenes).forEach(room => {\r\n    const actions: Action[] = [];\r\n    room.actions?.forEach(action => actions.push(action));\r\n    room.conditions?.forEach(condition =>\r\n      condition?.actions?.forEach(action => actions.push(action))\r\n    );\r\n    actions.forEach(action => {\r\n      if (action.scene) {\r\n        assert(scenes[action.scene] != null, action);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nnamespace Scene {\r\n  export const validate = (scene: any): Scene => {\r\n    assert(isObject(scene), scene);\r\n    assert(scene.hasOwnProperty('id') && typeof scene.id === 'string', scene);\r\n    assert(scene.hasOwnProperty('name') && typeof scene.name === 'string', scene);\r\n\r\n    if (scene.hasOwnProperty('description')) {\r\n      assert(typeof scene.description === 'string', scene);\r\n    }\r\n\r\n    const actions: Action[] = [];\r\n    if (scene.hasOwnProperty('actions')) {\r\n      assert(Array.isArray(scene.actions), scene);\r\n      scene.actions.forEach((action: any) => actions.push(Action.validate(action)));\r\n\r\n    }\r\n\r\n    const conditions: Condition[] = [];\r\n    if (scene.hasOwnProperty('conditions')) {\r\n      assert(Array.isArray(scene.conditions), scene);\r\n      scene.conditions.forEach((condition: any) => conditions.push(Condition.validate(condition)));\r\n    }\r\n\r\n    assert(!hasUnknownProperties(scene, ['id', 'name', 'description', 'actions', 'conditions']), scene);\r\n\r\n    return {\r\n      ...scene,\r\n      actions,\r\n      conditions\r\n    };\r\n  };\r\n}\r\n\r\nexport default Scene;\r\nexport { importScenes };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport GameState from './types/GameState';\r\nimport { importScenes } from './types/Scene';\r\nimport './index.css';\r\n\r\nconst scenes = importScenes();\r\nconst initialState: GameState = {\r\n  sceneId: 'outside_front_door',\r\n  inventory: [],\r\n  visited: []\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App scenes={scenes} initialState={initialState} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}