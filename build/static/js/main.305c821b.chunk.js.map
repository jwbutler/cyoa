{"version":3,"sources":["Button.tsx","ActionButton.tsx","GameState.tsx","saveFile.tsx","Controller.tsx","Lightbox.tsx","Footer.tsx","Menu.tsx","App.tsx","scenes.tsx","index.tsx"],"names":["Button","type","size","onClick","children","rest","className","join","ActionButton","action","controller","inventory","requires","items","every","item","includes","forbids","find","isVisible","adds","removes","scene","setInventory","setSceneId","filter","text","equals","first","second","JSON","stringify","localStorage","window","load","value","serialized","getItem","parse","atob","e","console","log","save","state","setItem","btoa","serialize","Controller","props","currentState","sceneId","restart","initialState","setSavedGame","saveFile","Lightbox","title","body","x","ok","cancel","handleClose","Footer","savedGame","setLightbox","confirm","gameStateEquals","disabled","Menu","description","ref","createRef","useEffect","current","scrollTo","App","scenes","useState","lightbox","loadSavedGame","create","name","actions","map","index","_validateScene","_checkState","_isObject","hasOwnProperty","id","Array","isArray","_validateAction","forEach","i","_validateRefIntegrity","Object","values","room","condition","obj","Error","o","scenesById","json","importScenes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.305c821b.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\r\nimport './Button.css';\r\n\r\ntype ButtonType = 'white';\r\ntype ButtonSize = 'small' | 'medium';\r\n\r\ntype Props = {\r\n  type?: ButtonType,\r\n  size?: ButtonSize,\r\n  onClick?: () => void,\r\n  disabled?: boolean,\r\n  children: ReactNode\r\n};\r\n\r\n/**\r\n * Core UI component representing a button.  This defines a number of styles for standard button types.\r\n * This component should be used for all buttons throughout the application to maintain a unified look and feel.\r\n */\r\nconst Button = ({\r\n  type = 'white',\r\n  size = 'medium',\r\n  onClick,\r\n  children,\r\n  ...rest\r\n}: Props) => {\r\n  const className = ['button', type, size].join(' ');\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={onClick}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from './Button';\r\nimport Controller from './Controller';\r\nimport type { Action } from './types';\r\n\r\ntype Props = {\r\n  action: Action,\r\n  controller: Controller\r\n};\r\n\r\n/**\r\n * Conditionally displays a {@link Button}, based on a particular {@link Action}, with an appropriate onClick handler\r\n * that executes the appropriate logic defined by the action.\r\n */\r\nconst ActionButton = ({ action, controller }: Props) => {\r\n  const isVisible = () => {\r\n    const { inventory } = controller;\r\n    if (action.requires) {\r\n      if (action.requires.items) {\r\n        if (!action.requires.items.every(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (action.forbids) {\r\n      if (action.forbids.items) {\r\n        if (action.forbids.items.find(item => inventory.includes(item))) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const onClick = () => {\r\n    const { adds, removes, scene } = action;\r\n    const { inventory, setInventory, setSceneId } = controller;\r\n    if (scene) {\r\n      setSceneId(scene);\r\n    }\r\n    if (adds) {\r\n      const { items } = adds;\r\n      if (items) {\r\n        // TODO: add distinct().  Doesn't matter since remove() will remove the duplicates\r\n        const updatedInventory = [...inventory, ...items]\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n    if (removes) {\r\n      const { items } = removes;\r\n      if (items) {\r\n        // TODO: add distinct()\r\n        const updatedInventory = inventory.filter(item => items && !items.includes(item));\r\n        setInventory(updatedInventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isVisible()) {\r\n    return (\r\n      <Button\r\n        type=\"white\"\r\n        size=\"medium\"\r\n        onClick={onClick}\r\n      >\r\n        {action.text}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default ActionButton;\r\n","type GameState = {\r\n  sceneId: string,\r\n  inventory: string[]\r\n};\r\n\r\n/**\r\n * Serialize the contents of {@link GameState} to JSON, and then base-64 encode the result.\r\n */\r\nconst serialize = (state: GameState) => btoa(JSON.stringify(state));\r\n\r\n/**\r\n * Decode the specified base64 string that represents a {@link GameState} object, and then parse it as JSON.\r\n * TODO: Validate the result using json-schema\r\n */\r\nconst deserialize = (value: string) => JSON.parse(atob(value)) as GameState;\r\n\r\nconst equals = (first: GameState | null, second: GameState | null) => JSON.stringify(first) === JSON.stringify(second);\r\n\r\nexport type {\r\n  GameState\r\n};\r\n\r\nexport {\r\n  deserialize,\r\n  serialize,\r\n  equals\r\n}\r\n","import { deserialize, GameState, serialize } from './GameState';\r\n\r\nconst { localStorage } = window;\r\n\r\nconst load = (): (GameState | null) => {\r\n  const serialized = localStorage.getItem('save');\r\n  if (serialized) {\r\n    try {\r\n      return deserialize(serialized) as GameState;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nconst save = (state: GameState) => {\r\n  window.localStorage.setItem('save', serialize(state));\r\n}\r\n\r\nconst exists = () => !!localStorage.getItem('save');\r\n\r\nexport {\r\n  load,\r\n  save,\r\n  exists\r\n};\r\n","import { Consumer } from './types';\r\nimport { GameState } from './GameState';\r\nimport { ReactElement } from 'react';\r\nimport { save as saveFile } from './saveFile';\r\n\r\ninterface Props {\r\n  readonly initialState: GameState,\r\n  readonly sceneId: string,\r\n  readonly inventory: string[],\r\n  readonly setSceneId: Consumer<string>,\r\n  readonly setInventory: Consumer<string[]>,\r\n  readonly lightbox: ReactElement | null,\r\n  readonly setLightbox: Consumer<ReactElement | null>,\r\n  readonly savedGame: GameState | null,\r\n  readonly setSavedGame: Consumer<GameState | null>,\r\n}\r\n\r\n/**\r\n * Core state management class which encapsulates the result of various {@link React#useState} hooks.\r\n * This is passed from the parent component ({@link App}) to its children, rather than passing individual\r\n * state elements and callback functions.\r\n *\r\n * I'm experimenting with ways to initialize this \"class\" concisely, without a lot of repeated definitions.\r\n * The result looks a little strange.\r\n */\r\ninterface Controller extends Props {\r\n  readonly currentState: GameState;\r\n  readonly load: Consumer<GameState>;\r\n  readonly restart: () => void;\r\n  readonly save: () => void;\r\n}\r\n\r\nnamespace Controller {\r\n  export const create = (props: Props) => {\r\n    const currentState = {\r\n      sceneId: props.sceneId,\r\n      inventory: props.inventory\r\n    };\r\n\r\n    const load = ({ sceneId, inventory }: GameState) => {\r\n      const { setSceneId, setInventory } = props;\r\n      setSceneId(sceneId);\r\n      setInventory(inventory);\r\n    };\r\n\r\n    const restart = () => load(props.initialState);\r\n\r\n    const save = () => {\r\n      const { setSavedGame } = props;\r\n      saveFile(currentState);\r\n      setSavedGame(currentState);\r\n    }\r\n\r\n    return {\r\n      ...props,\r\n      currentState,\r\n      load,\r\n      restart,\r\n      save,\r\n    };\r\n  };\r\n}\r\n\r\nexport default Controller;\r\n","import Button from './Button';\r\nimport './Lightbox.css';\r\nimport { Consumer } from './types';\r\n\r\ntype Props = {\r\n  title?: string,\r\n  body?: string,\r\n  x?: boolean,\r\n  ok?: boolean,\r\n  cancel?: boolean,\r\n  handleClose: Consumer<boolean>\r\n};\r\n\r\nconst Lightbox = ({\r\n  title,\r\n  body,\r\n  x = true,\r\n  ok = true,\r\n  cancel = false,\r\n  handleClose\r\n}: Props) => (\r\n  <>\r\n    {/* Don't nest this inside the lightbox for CSS reasons */}\r\n    <div className=\"lightbox-background\" />\r\n    <div className=\"lightbox\">\r\n      {x && (\r\n        <div className=\"lightbox-x\" onClick={() => handleClose(false)}>×</div>\r\n      )}\r\n      <h2 className=\"lightbox-title\">\r\n        {title || ' '}\r\n      </h2>\r\n      {body && (\r\n        <p className=\"lightbox-body\">\r\n          {body}\r\n        </p>\r\n      )}\r\n      {(ok || cancel) && (\r\n        <>\r\n          {ok && (\r\n            <Button type=\"white\" size=\"medium\" onClick={() => handleClose(true)}>\r\n              OK\r\n            </Button>\r\n          )}\r\n          {cancel && (\r\n            <Button type=\"white\" size=\"medium\" onClick={() => handleClose(false)}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Lightbox;\r\n","import Button from './Button';\r\nimport Controller from './Controller';\r\nimport Lightbox from './Lightbox';\r\nimport React from 'react';\r\nimport { equals as gameStateEquals } from './GameState';\r\nimport './Footer.css';\r\n\r\ntype Props = {\r\n  controller: Controller\r\n}\r\n\r\nconst Footer = ({ controller }: Props) => {\r\n  const loadPrompt = () => {\r\n    if (\r\n      gameStateEquals(controller.currentState, controller.savedGame)\r\n      || gameStateEquals(controller.currentState, controller.initialState)\r\n    ) {\r\n      load();\r\n    } else {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Are you sure?\"\r\n          body=\"You will lose any unsaved progress.\"\r\n          x={false}\r\n          cancel={true}\r\n          handleClose = {(confirm) => {\r\n            if (confirm) {\r\n              load();\r\n            } else {\r\n              controller.setLightbox(null);\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const load = () => {\r\n    if (controller.savedGame) {\r\n      controller.load(controller.savedGame);\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Game loaded.\"\r\n          x={false}\r\n          handleClose={() => controller.setLightbox(null)}\r\n        />\r\n      );\r\n    } else {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Error\"\r\n          body=\"No saved game found.\"\r\n          x={false}\r\n          handleClose={() => controller.setLightbox(null)}\r\n        />\r\n      );\r\n      controller.setSavedGame(null);\r\n    }\r\n  };\r\n\r\n  const savePrompt = () => {\r\n    if (!gameStateEquals(controller.currentState, controller.savedGame)) {\r\n      controller.setLightbox(\r\n        <Lightbox\r\n          title=\"Are you sure?\"\r\n          body=\"You will overwrite your existing saved game.\"\r\n          x={false}\r\n          cancel={true}\r\n          handleClose = {(confirm) => {\r\n            if (confirm) {\r\n              save();\r\n            } else {\r\n              controller.setLightbox(null);\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      save();\r\n    }\r\n  };\r\n\r\n  const save = () => {\r\n    controller.save();\r\n    controller.setLightbox(\r\n      <Lightbox\r\n        title=\"Game saved\"\r\n        x={false}\r\n        handleClose={() => controller.setLightbox(null)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const restartPrompt = () => {\r\n    controller.setLightbox(\r\n      <Lightbox\r\n        title=\"Are you sure?\"\r\n        body=\"You will lose any unsaved progress.\"\r\n        x={false}\r\n        cancel={true}\r\n        handleClose = {(confirm) => {\r\n          if (confirm) {\r\n            controller.restart();\r\n          }\r\n          controller.setLightbox(null);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={restartPrompt}\r\n      >\r\n        New\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={savePrompt}\r\n      >\r\n        Save\r\n      </Button>\r\n      <Button\r\n        type=\"white\"\r\n        size=\"small\"\r\n        onClick={loadPrompt}\r\n        disabled={!controller.savedGame}\r\n      >\r\n        Load\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { createRef, ReactNode, RefObject, useEffect } from 'react';\r\nimport './Menu.css';\r\n\r\ntype Props = {\r\n  title: string,\r\n  description?: string,\r\n  children: ReactNode\r\n}\r\n\r\n/**\r\n * Represents the core decision display of the application.\r\n * This consists of a header, descriptive text, and any number of action buttons.\r\n */\r\nconst Menu = ({ title, description, children }: Props) => {\r\n  const ref: RefObject<any> = createRef();\r\n\r\n  // Scroll to the top of the page when entering any new scene.\r\n  useEffect(() => {\r\n    ref.current.scrollTo(0, 0);\r\n  });\r\n\r\n  return (\r\n    <div className=\"menu\" ref={ref}>\r\n      <h1 className=\"menu-title\">{title}</h1>\r\n      <p className=\"menu-description\">\r\n        {description}\r\n      </p>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { ReactElement, useState } from 'react';\r\nimport ActionButton from './ActionButton';\r\nimport Controller from './Controller';\r\nimport Footer from './Footer';\r\nimport Menu from './Menu';\r\nimport { GameState } from './GameState';\r\nimport type { Scene } from './types';\r\nimport './App.css';\r\nimport { load as loadSavedGame } from './saveFile';\r\n\r\ntype Props = {\r\n  scenes: { [name: string]: Scene },\r\n  initialState: GameState\r\n}\r\n\r\n/**\r\n * Entry point for the game engine.  There should be no game-specific logic from this point on; all behavior\r\n * is driven by the data passed as props.\r\n */\r\nconst App = ({ scenes, initialState }: Props) => {\r\n  const [sceneId, setSceneId] = useState(initialState.sceneId);\r\n  const [inventory, setInventory] = useState(initialState.inventory);\r\n  const [lightbox, setLightbox] = useState(null as (ReactElement | null));\r\n  const [savedGame, setSavedGame] = useState(loadSavedGame());\r\n  const controller: Controller = Controller.create({\r\n    initialState,\r\n    sceneId, setSceneId,\r\n    inventory, setInventory,\r\n    lightbox, setLightbox,\r\n    savedGame, setSavedGame\r\n  });\r\n  const scene = scenes[sceneId];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Menu\r\n        title={scene.name}\r\n        description={scene.description}\r\n      >\r\n        {scene.actions.map((action, index) => (\r\n          <ActionButton\r\n            action={action}\r\n            controller={controller}\r\n            key={`${action.text}_${index}`}\r\n          />\r\n        ))}\r\n      </Menu>\r\n      <Footer controller={controller} />\r\n      {lightbox}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Action, Scene } from './types';\r\nimport json from './scenes.json';\r\n\r\n/*\r\n * This is extremely tedious; we'll delete it once we integrate with json-schema\r\n */\r\n\r\ntype ScenesById = { [ name: string]: Scene };\r\n\r\nconst importScenes: () => ScenesById = () => {\r\n  const scenesById: ScenesById = {};\r\n  json.forEach(obj => {\r\n    const room = _validateScene(obj);\r\n    const { id } = room;\r\n    scenesById[id] = room;\r\n  });\r\n  _validateRefIntegrity(scenesById);\r\n  return scenesById;\r\n}\r\n\r\nconst _validateScene = (scene: any): Scene => {\r\n  _checkState(_isObject(scene), scene);\r\n  _checkState(scene.hasOwnProperty('id') && typeof scene.id === 'string', scene);\r\n  _checkState(scene.hasOwnProperty('name') && typeof scene.name === 'string', scene);\r\n  if (scene.hasOwnProperty('description')) {\r\n    _checkState(typeof scene.description === 'string', scene);\r\n  }\r\n  _checkState(scene.hasOwnProperty('actions') && Array.isArray(scene.actions), scene);\r\n  const actions = scene.actions.map((action: any) => _validateAction(action));\r\n\r\n  return {\r\n    ...scene,\r\n    actions\r\n  };\r\n};\r\n\r\nconst _validateAction = (action: any): Action => {\r\n  _checkState(action.hasOwnProperty('text') && typeof action.text === 'string', action);\r\n  if (action.hasOwnProperty('scene')) {\r\n    _checkState(typeof action.scene === 'string', action);\r\n  }\r\n  if (action.hasOwnProperty('requires')) {\r\n    _checkState(_isObject(action.requires), action);\r\n    if (action.requires.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.requires.items), action);\r\n      action.requires.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('forbids')) {\r\n    _checkState(_isObject(action.forbids), action);\r\n    if (action.forbids.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.forbids.items), action);\r\n      action.forbids.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('adds')) {\r\n    _checkState(_isObject(action.adds), action);\r\n    if (action.adds.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.adds.items), action);\r\n      action.adds.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  if (action.hasOwnProperty('removes')) {\r\n    _checkState(_isObject(action.removes), action);\r\n    if (action.removes.hasOwnProperty('items')) {\r\n      _checkState(Array.isArray(action.removes.items), action);\r\n      action.removes.items.forEach((i: any) => _checkState(typeof i === 'string', action));\r\n    }\r\n  }\r\n  return action as Action;\r\n};\r\n\r\n/**\r\n * Validate that all references to scene ids are valid\r\n */\r\nconst _validateRefIntegrity = (scenes: ScenesById) => {\r\n  Object.values(scenes).forEach(room => {\r\n    room.actions.forEach(action => {\r\n      if (action.scene) {\r\n        _checkState(scenes[action.scene] != null, action);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * @param obj The contents of the object being checked, for logging purposes\r\n */\r\nconst _checkState = (condition: boolean, obj: any): void => {\r\n  if (!condition) {\r\n    throw new Error(\"Invalid definition: \" + JSON.stringify(obj));\r\n  }\r\n}\r\n\r\nconst _isObject = (o: object) => {\r\n  return typeof o === 'object' && !Array.isArray(o);\r\n}\r\n\r\nexport { importScenes };\r\nexport type { Scene, Action };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { GameState } from './GameState';\r\nimport { importScenes } from './scenes';\r\nimport './index.css';\r\n\r\nconst scenes = importScenes();\r\nconst initialState: GameState = { sceneId: 'outside_front_door', inventory: [] };\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App scenes={scenes} initialState={initialState} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}